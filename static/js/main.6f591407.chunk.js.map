{"version":3,"sources":["serviceWorker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","getItems","count","offset","Array","from","length","v","k","map","id","Date","getTime","content","stateItemList","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","justifyContent","border","background","fontWeight","getListStyle","isDraggingOver","width","alignItemsStyle","display","buttonStyle","marginRight","marginLeft","QuoteApp","useState","stateItem","setStateItem","storageSave","localStorage","setItem","JSON","stringify","editableText","item","type","onSave","value","val","itemId","newState","forEach","findResult","find","onSaveName","editOnViewClick","hideIcons","submitOnUnfocus","submitOnEnter","viewProps","style","height","inputProps","fontSize","editButtonClassName","saveButtonClassName","cancelButtonClassName","viewContainerClassName","validation","validationMessage","droppableCoatList","_","i","push","key","droppableId","provided","snapshot","ref","innerRef","droppableProps","index","draggableId","draggableProps","dragHandleProps","placeholder","onClick","onClickCoatNo","a","concat","gameFinishMember","slice","j","waitLastMember","pop","nextGameMember","shift","filter","group","gameFinish","onDragEnd","result","source","destination","sInd","dInd","items","list","startIndex","endIndex","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","parse","getItem","localStateItemList","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f591407.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport * as serviceWorker from './serviceWorker';\nimport EdiText from 'react-editext'\nimport './index.css'\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}-${new Date().getTime()}`,\n    content: `${k + 1 + offset}`\n  }));\n\nvar stateItemList = [];\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n\n  padding: 5,\n  margin: 5,\n  justifyContent: \"center\",\n  border: \"1px solid\",\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"white\",\n\n  fontWeight: \"bold\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: 2,\n  margin: 2,\n  width: \"31%\",\n});\n\nconst alignItemsStyle = {\n  margin: 2,\n  display: \"flex\",\n  justifyContent: \"center\"\n};\n\nconst buttonStyle = {\n  marginRight: 12,\n  marginLeft: 12,\n};\n\nfunction QuoteApp() {\n  // getItems = (count, offset = 0)\n  const [stateItem, setStateItem] = useState([getItems(4), getItems(4, 4), getItems(4, 8), getItems(6, 12), getItems(7, 18)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(stateItem[sInd], source.index, destination.index);\n      const newState = [...stateItem];\n      newState[sInd] = items;\n      setStateItem(newState);\n    } else {\n      const result = move(stateItem[sInd], stateItem[dInd], source, destination);\n      const newState = [...stateItem];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setStateItem(newState.filter(group => group.length));\n    }\n  }\n\n  function undoGameFinish() {\n    if (stateItemList.length < 1) {\n      return;\n    }\n\n    const newState = stateItemList[stateItemList.length - 1].slice();\n    stateItemList.pop();\n    setStateItem(newState);\n  }\n\n  const onSaveName = (val, itemId) => {\n    const newState = [...stateItem];\n    newState.forEach(state => {\n      var findResult = state.find((item) => item.id === itemId);\n      if (findResult) {\n        findResult.content = val;\n      }\n    })\n    setStateItem(newState);\n  }\n\n  const gameFinish = (onClickCoatNo) => {\n    // コートの人数が4人以外の時は試合終了させない\n    if (stateItem[onClickCoatNo].length !== 4) {\n      return;\n    }\n\n    // ゲーム終了時にオートセーブ\n    storageSave()\n\n    // シャローコピー回避のためstateItemListの中身を一つずつ退避\n    const a = [];\n    stateItem.map((item) => a.push([].concat(item)));\n    stateItemList.push(a);\n\n    // 試合が終わった4人を退避\n    const gameFinishMember = stateItem[onClickCoatNo].slice(0, 4);\n    // 待機の末尾にいるメンバーを退避 1 or 2\n    const j = stateItemList.length % 2;\n    const waitLastMember = stateItem[3].slice(stateItem[3].length - (j + 1), stateItem[3].length);\n\n    const newState = [...stateItem];\n    // 待機の末尾2人を削除\n    [...Array(j + 1)].map(() => newState[3].pop());\n    newState[3] = [...newState[3], ...gameFinishMember.slice(0, 1)];\n    newState[3] = [...newState[3], ...gameFinishMember.slice(2, 3)];\n    newState[3] = [...newState[3], ...waitLastMember];\n    newState[3] = [...newState[3], ...gameFinishMember.slice(1, 2)];\n    newState[3] = [...newState[3], ...gameFinishMember.slice(3, 4)];\n\n    const nextGameMember = newState[3].slice(0, 4);\n    newState[onClickCoatNo] = nextGameMember;\n    [...Array(4)].map(() => newState[3].shift());\n\n    setStateItem(newState.filter(group => group.length));\n  }\n\n  function storageSave() {\n    localStorage.setItem(\"stateItem\", JSON.stringify(stateItem));\n    localStorage.setItem(\"stateItemList\", JSON.stringify(stateItemList));\n  }\n\n  function storageLoad() {\n    const stateItem = JSON.parse(localStorage.getItem(\"stateItem\"));\n    const localStateItemList = JSON.parse(localStorage.getItem(\"stateItemList\"));\n    if (!stateItem || !localStateItemList) {\n      return;\n    }\n\n    setStateItem(stateItem.filter(group => group.length));\n    stateItemList = localStateItemList;\n  }\n\n  function editableText(item) {\n    return <EdiText\n      type='text'\n      onSave={value => onSaveName(value, item.id)}\n      value={item.content}\n      editOnViewClick={true}\n      hideIcons={true}\n      submitOnUnfocus\n      submitOnEnter\n      viewProps={{\n        style: {\n          width: \"4em\",\n          height: \"1em\",\n        }\n      }}\n      inputProps={{\n        style: {\n          fontSize: 16\n        }\n      }}\n      editButtonClassName=\"custom-edit-button-hidden\"\n      saveButtonClassName=\"custom-edit-button-hidden\"\n      cancelButtonClassName=\"custom-edit-button-hidden\"\n      viewContainerClassName='view-container'\n      validation={val => (val.length > 0 && val.length < 6)}\n      validationMessage=\"1-5文字を許容\"\n    />;\n  }\n\n  var droppableCoatList = [];\n  [...Array(3)].map((_, i) =>\n    droppableCoatList.push(\n      <Droppable key={i} droppableId={`${i}`}>\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            style={getListStyle(snapshot.isDraggingOver)}\n            {...provided.droppableProps}\n          >\n            第{i + 1}コート\n            {stateItem[i].map((item, index) => (\n              <Draggable\n                key={item.id}\n                draggableId={item.id}\n                index={index}\n              >\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={getItemStyle(\n                      snapshot.isDragging,\n                      provided.draggableProps.style\n                    )}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-around\"\n                      }}\n                    >\n                      {editableText(item)}\n                    </div>\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n            <button type=\"button\" style={{ height: 40, width: \"100%\" }} onClick={() => gameFinish(i)}>終了</button>\n          </div>\n        )}\n      </Droppable>\n    )\n  )\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div>\n        <div style={alignItemsStyle}>\n          {droppableCoatList}\n        </div>\n        <div style={alignItemsStyle}>\n          <Droppable key={3} droppableId={`${3}`}>\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                {...provided.droppableProps}\n              >\n                順番待ち\n                {stateItem[3].map((item, index) => (\n                  <Draggable\n                    key={item.id}\n                    draggableId={item.id}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <div\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\"\n                          }}\n                        >\n                          {editableText(item)}\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable key={4} droppableId={`${4}`}>\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n                {...provided.droppableProps}\n              >\n                休み\n                {stateItem[4].map((item, index) => (\n                  <Draggable\n                    key={item.id}\n                    draggableId={item.id}\n                    index={index}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        <div\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"space-around\"\n                          }}\n                        >\n                          {editableText(item)}\n                        </div>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n        <div style={alignItemsStyle}>\n          {stateItemList.length}ゲーム終了\n          <button type=\"button\" onClick={undoGameFinish} style={buttonStyle}>Ctrl+Z</button>\n          <button type=\"button\" onClick={storageSave} style={buttonStyle}>Save</button>\n          <button type=\"button\" onClick={storageLoad} style={buttonStyle}>Load</button>\n        </div>\n      </div>\n    </DragDropContext >\n  );\n}\n\nReactDOM.render(<QuoteApp />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}